// Generated by CoffeeScript 1.4.0
(function() {
  var Schema, async, wongo;

  async = require('async');

  wongo = require('wongo');

  Schema = wongo.Schema;

  exports.plugin = function(schema, options) {
    if (options == null) {
      options = {};
    }
    schema.add({
      lft: {
        type: Number,
        min: 0
      }
    });
    schema.add({
      rgt: {
        type: Number,
        min: 0
      }
    });
    schema.add({
      parentId: {
        type: Schema.ObjectId
      }
    });
    schema.index({
      parentId: 1
    });
    schema.index({
      lft: 1
    });
    return schema.index({
      rgt: 1
    });
  };

  exports.setRoot = function(_type, root, callback) {
    root.parentId = null;
    root.lft = 1;
    root.rgt = 2;
    return wongo.save(_type, root, callback);
  };

  exports.addNode = function(_type, node, parentId, callback) {
    return wongo.findById(_type, parentId, function(err, parent) {
      node.parentId = parentId;
      node.lft = parent.rgt;
      node.rgt = node.lft + 1;
      return async.parallel([
        function(done) {
          return wongo.save(_type, node, done);
        }, function(done) {
          var values, where;
          where = {
            lft: {
              $gt: node.lft
            }
          };
          values = {
            $inc: {
              lft: 2,
              rgt: 2
            }
          };
          return wongo.update(_type, where, values, done);
        }, function(done) {
          var values, where;
          where = {
            lft: {
              $lt: node.lft
            },
            rgt: {
              $gte: node.lft
            }
          };
          values = {
            $inc: {
              rgt: 2
            }
          };
          return wongo.update(_type, where, values, done);
        }
      ], function(err, results) {
        return callback(err, results[0]);
      });
    });
  };

  exports.removeNode = function(_type, node, callback) {
    return callback();
  };

  exports.findAncestors = function(_type, nodeId, callback) {
    return wongo.findById(_type, nodeId, function(err, node) {
      var query;
      if (err) {
        return callback(err);
      }
      query = {
        where: {
          lft: {
            $lt: node.lft
          },
          rgt: {
            $gt: node.rgt
          }
        }
      };
      return wongo.find(_type, query, callback);
    });
  };

  exports.findDescendants = function(_type, nodeId, callback) {
    return wongo.findById(_type, nodeId, function(err, node) {
      var query;
      if (err) {
        return callback(err);
      }
      query = {
        where: {
          lft: {
            $gt: node.lft
          },
          rgt: {
            $lt: node.rgt
          }
        }
      };
      return wongo.find(_type, query, callback);
    });
  };

  exports.findChildren = function(_type, nodeId, callback) {
    var query;
    query = {
      where: {
        parentId: nodeId
      }
    };
    return wongo.find(_type, query, callback);
  };

}).call(this);
